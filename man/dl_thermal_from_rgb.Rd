% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TR_thermal_super_res.R
\name{dl_thermal_from_rgb}
\alias{dl_thermal_from_rgb}
\title{Predict thermal data from RGB images using Deep Learning}
\usage{
dl_thermal_from_rgb(
  rgb_rst,
  temp_rst,
  rgb_high_res = NULL,
  npix = 10000,
  rm_cor = FALSE,
  rm_cor_thresh = 0.98,
  get_dl_model = TRUE,
  verbose = TRUE,
  scale_data = TRUE,
  n_epochs = 80,
  validation_split = 0.2,
  learning_rate = 0.01
)
}
\arguments{
\item{rgb_rst}{An RGB `SpatRaster` object containing RGB data aligned with `temp_rst`.}

\item{temp_rst}{A `SpatRaster` object containing corresponding lower-resolution
thermal data.}

\item{rgb_high_res}{(Optional) A `SpatRaster` object containing high-resolution
RGB data for which thermal predictions are to be made.}

\item{npix}{The number of pixels to sample for model training.}

\item{rm_cor}{Logical flag indicating whether to remove highly correlated features
before model training.}

\item{rm_cor_thresh}{Correlation threshold for removing correlated features.}

\item{get_dl_model}{Logical flag indicating whether to return the deep learning
model along with the predicted temperature raster(s).}

\item{verbose}{Logical flag for printing progress messages.}

\item{scale_data}{Logical flag indicating whether to scale the feature data before
model training.}

\item{n_epochs}{Number of epochs for model training.}

\item{validation_split}{Fraction of the data to be used as validation data.}

\item{learning_rate}{Learning rate for the optimizer.}
}
\value{
Depending on `get_dl_model`, either a list containing the predicted
        temperature raster(s) and the deep learning model, or just the predicted
        temperature raster(s). If `rgb_high_res` is provided, the list will include
        predictions for both the training resolution and the high-resolution RGB.
        List components include: `pred_temp_train` is the thermal image predicted
        for the training data (usually with lower resolution); `pred_temp_rgb_hr`
        is the predicted thermal data for the high-resolution RGB; `dl_mod` is the
        Deep Learning model trained for the image.
}
\description{
Enhances the resolution or predicts thermal data based on high-resolution RGB images
and an existing low-resolution thermal raster using a deep learning model. The model
is trained on features derived from the RGB and low-resolution thermal data, optionally
scaled and with high correlation features removed. The function can then predict
thermal data aligned with a provided high-resolution RGB image, effectively
super-resolving the thermal image or generating new thermal data where none exists.
}
\details{
The deep learning model used for predicting thermal data from high-resolution RGB
images is built using the Keras library in R. This model is structured as a sequential
model, comprising several densely connected neural network layers with ReLU activations,
dropout layers for regularization, and a final dense layer with a single unit for
regression output. The model aims to learn complex relationships between spatial features
derived from RGB images and corresponding thermal data, allowing it to predict temperature
values for new, high-resolution RGB images.

Model Structure

Input Layer: The input layer is designed to accept the flattened feature vectors derived
from the color/spatial/texture features of RGB and thermal data.

The model includes multiple dense (fully connected) layers with ReLU (Rectified Linear Unit)
activation functions. These layers are responsible for capturing nonlinear relationships in
the data.

Dropout layers are inserted between dense layers to reduce the risk of overfitting by randomly
setting a fraction of input units to 0 at each update during training time. This helps improve
model generalization.

Activity regularization layers are applied to introduce a penalty on the layer's activation,
further aiding in preventing overfitting and promoting simpler models.

Output Layer: The final layer is a dense layer with a single unit, suitable for regression tasks.
This layer outputs the predicted temperature value for each input feature vector.

Training Configuration

Loss Function: Mean Squared Error (MSE), suitable for regression problems, measuring the average
of the squares of the errors between true and predicted values.

Optimizer: Adam, with a specified learning rate, an algorithm for first-order gradient-based
optimization of stochastic objective functions. Metrics: Mean Absolute Error (MAE), providing an
average of absolute differences between predicted and actual values, offering an interpretation
of prediction accuracy.

Epochs and Validation Split: The model is trained for a predefined number of epochs, with a portion
of the data reserved for validation to monitor and prevent overfitting.
}
