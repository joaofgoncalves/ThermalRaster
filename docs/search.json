[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Joao Goncalves. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Goncalves J (2024). ThermalRaster: Extract, process visualize thermal RGB images FLIR cameras. R package version 0.1.0.","code":"@Manual{,   title = {ThermalRaster: Extract, process and visualize thermal and RGB images from FLIR cameras},   author = {Joao Goncalves},   year = {2024},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"readme","dir":"","previous_headings":"","what":"Extract, process and visualize thermal and RGB images from FLIR\n    cameras","title":"Extract, process and visualize thermal and RGB images from FLIR\n    cameras","text":"João Gonçalves 2024-04-02","code":""},{"path":[]},{"path":"/index.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"Extract, process and visualize thermal and RGB images from FLIR\n    cameras","text":"Package description Working RGB imagery Working thermal data Generating synthetic predicted thermal images Drawing ROIs terra package Drawing ROIs Roboflow","code":""},{"path":"/index.html","id":"package-description","dir":"","previous_headings":"","what":"Package description","title":"Extract, process and visualize thermal and RGB images from FLIR\n    cameras","text":"ThermalRaster package designed enhance processing analysis FLIR thermal RGB images. offers comprehensive suite functions extracting, processing, visualizing thermal data embedded within metadata FLIR images. Key features also include retrieving full cropped RGB images. Imagery returned SpatRaster objects compatible terra package, enabling profit package features/toolkit. Using overlap low-resolution thermal imagery high-resolution RGB images, package enables creation synthetic predicted thermal images either cropped full RGB images. achieved application Random Forest algorithm (via ranger package) Deep Learning methodologies (utilizing keras/tensorflow). package also enables handling JSON annotations/masks Roboflow (https://roboflow.com), enabling extraction ROIs images analysis, making possible assess, plot, analyze model fine-scale thermal variation micro-habitats (.e., TReMs - Tree Related Micro-habitats). Roboflow’s advantages include improved ROI digitization using manual SAM (Facebook’s Segment Anything) algorithm. ROIs can also generated terra package SpatVector objects. EXIFtool (https://exiftool.org/) broadly used retrieving metadata FLIR imagery ThermImage package convert raw temperature. show examples processing FLIR ONE Edge Pro imagery provided samples package:","code":""},{"path":"/index.html","id":"working-with-rgb-imagery","dir":"","previous_headings":"","what":"Working with RGB imagery","title":"Extract, process and visualize thermal and RGB images from FLIR\n    cameras","text":"Plot FLIR image thumbnail captured FLIR camera:  Now let’s check full RGB image contained FLIR’s metadata:  now cropped RGB matches size resolution thermal image (.e., 640x480):  can see second image narrower closer tree trunk (focus target).","code":"library(ThermalRaster) library(terra) library(dplyr) library(ggplot2)  # Image path in sample data image_path <- system.file(\"extdata\", \"BEECH1_EINBRGB_IPUQ4327.JPG\", package = \"ThermalRaster\")  # Provide here the folder path where the EXIFtool executale is # NOTE: The executable must be named exiftool exiftool_path = \"C:/MyFiles/R-dev/Giant_Trees\" thumb <- flir_thumbnail_to_rast(image_path)  plotRGB(thumb) rgb_hr <- flir_rgb_to_rast(image_path, exiftool_path, crop = FALSE)  print(rgb_hr) ## class       : SpatRaster  ## dimensions  : 1440, 1080, 3  (nrow, ncol, nlyr) ## resolution  : 1, 1  (x, y) ## extent      : 0, 1080, 0, 1440  (xmin, xmax, ymin, ymax) ## coord. ref. :   ## source(s)   : memory ## names       : red, green, blue  ## min values  :   0,     0,    0  ## max values  : 255,   255,  255 plotRGB(rgb_hr, main = \"Full RGB (1440x1080\") rgb_lr <- flir_rgb_to_rast(image_path, exiftool_path, crop = TRUE)  plotRGB(rgb_lr, main = \"Cropped RGB (640x480)\")"},{"path":"/index.html","id":"working-with-thermal-data","dir":"","previous_headings":"","what":"Working with thermal data","title":"Extract, process and visualize thermal and RGB images from FLIR\n    cameras","text":"Start extracting thermal data (degrees Celsius):  Now let’s remove outliers thermal image seem frequently occur lower portion temperature distribution values plot . convert values lower 3.5% percentile NA keep remaining values upper part distribution unchanged.  removing outliers temperature gradients tree surface micro-habitats cavities highlighted. Let’s test different color palette plot image:","code":"temp <- flir_raw_to_thermal(image_path, exiftool_path)  print(temp) ## class       : SpatRaster  ## dimensions  : 640, 480, 1  (nrow, ncol, nlyr) ## resolution  : 1, 1  (x, y) ## extent      : 0, 480, 0, 640  (xmin, xmax, ymin, ymax) ## coord. ref. :   ## source(s)   : memory ## name        :     lyr.1  ## min value   : -30.02469  ## max value   :  42.08388 summary(temp) ## Warning: [summary] used a sample  ##      lyr.1        ##  Min.   :-30.02   ##  1st Qu.: 12.16   ##  Median : 14.87   ##  Mean   : 15.00   ##  3rd Qu.: 18.33   ##  Max.   : 42.08 par(mfrow=c(1, 2)) plot_temp_rast(temp, palette = \"magma\", main = \"Thermal cropped\") plotRGB(rgb_lr, main = \"RGB cropped\") temp_out_rm <- remove_outliers(temp, pmin = 3.5, pmax = 100)  plot_temp_rast(temp_out_rm, palette = \"magma\") plot_temp_rast(temp_out_rm, palette=\"Spectral\")"},{"path":"/index.html","id":"generating-synthetic-or-predicted-thermal-images","dir":"","previous_headings":"","what":"Generating synthetic or predicted thermal images","title":"Extract, process and visualize thermal and RGB images from FLIR\n    cameras","text":"ThermalRaster package currently provides methods generate synthetic predicted thermal data. enables gain detail fine-scale variation surface temperature inspecting/visualizing structures micro-habitats. achieve , use overlap “low-resolution” thermal imagery — .e., target response variable — “high-resolution” RGB cropped image — .e., predictors features, based color texture — train Random Forest Deep Learning model. generalization across images highly “challenging”, implement methods need train model every time. also means different levels performance success depending objects depicted images. training, model can applied onto images used training — .e., “low-resolution” cropped RGB images — also full RGB image extracted FLIR’s metadata. Keep mind synthetic/predicted thermal data full RGB limitations since train region may include features image. Let’s check RF model output: Now, let’s plot predicted image considering train/cropped RGB (outliers removed: < 3.5% percentile):  now, using full RGB generate “synthetic”/predicted thermal image (also w/ outliers removed):  Notice RF model can reasonably predict temperature pixels fully outside training sample/conditions!","code":"rf_sup_res <- rf_thermal_from_rgb(              rgb_rst = rgb_lr,      # The predictors from cropped/low-res RGB              temp_rst = temp,       # The target thermal image              rgb_high_res = rgb_hr, # The full RGB image              npix = 30000,          # Number of sample pixels used for training              rm_cor = FALSE,        # Remove predictors through correlation              rm_cor_thresh = 0.98,  # Correlation threshold; used if rm_cor = TRUE              get_rf_model = TRUE,   # Get the RF model in the output object              verbose = TRUE,        # Print progress messages?              scale_data = FALSE)    # Scale the data before model training? ## |-> Calculating features ... ## Done. ##  ## |-> Extracting sample data for training ... ## Done. ##  ## |-> Training Random Forest model ... ## Done. ##  ## |-> Super-resolving the thermal image ... ## |-> Calculating features for the high-resolution RGB image ... ## Done. ##  ## Predicting.. Progress: 75%. Estimated remaining time: 10 seconds. ## Done. ## [Run Time: 2 minutes 37 seconds ] print(rf_sup_res$rf_mod) ## Ranger result ##  ## Call: ##  ranger::ranger(temp ~ ., data = samp_rstdf)  ##  ## Type:                             Regression  ## Number of trees:                  500  ## Sample size:                      30000  ## Number of independent variables:  29  ## Mtry:                             5  ## Target node size:                 5  ## Variable importance mode:         none  ## Splitrule:                        variance  ## OOB prediction error (MSE):       22.89146  ## R squared (OOB):                  0.7085754 pred_term_train_outlrm <- remove_outliers(rf_sup_res$pred_temp_train, pmin = 3.5)  par(mfrow=c(1, 3))  plotRGB(rgb_lr, main=\"Cropped RGB image\")  plot_temp_rast(temp_out_rm, palette=\"magma\", main=\"Thermal train data\")  plot_temp_rast(pred_term_train_outlrm, palette = \"magma\", main=\"Synthetic/predicted thermal\") # Remove outliers pred_term_full_outlrm <- remove_outliers(rf_sup_res$pred_temp_rgb_hr, pmin = 7.5)  par(mfrow=c(1, 2))  plotRGB(rgb_hr, main=\"Full RGB image\")  plot_temp_rast(pred_term_full_outlrm, palette = \"magma\", main=\"Synthetic/predicted thermal\")"},{"path":"/index.html","id":"working-with-regions-of-interest-rois","dir":"","previous_headings":"","what":"Working with regions-of-interest ROIs","title":"Extract, process and visualize thermal and RGB images from FLIR\n    cameras","text":"Basically two ways currently","code":""},{"path":"/index.html","id":"drawing-rois-with-the-terra-package","dir":"","previous_headings":"Working with regions-of-interest ROIs","what":"Drawing ROIs with the terra package","title":"Extract, process and visualize thermal and RGB images from FLIR\n    cameras","text":"objective demo check distribution temperature values different micro-habitats tree bole (bark one cavity). draw ROI geometry . draw ROI use draw function terra package. function allows drawing plot get SpatVector (points, lines polygons) SpatExtent object later use. calling function, start clicking cropped RGB image (since one overlaps thermal, .e. number columns/rows) draw selected geometry. done, press ESC select “Stop”. can also preset maximum number clicks. Let’s start loading train image:  Start new plotting device (useful avoid issues draw using RStudio) draw ROI. vertices coordinates saved object. drawing interactive, purpose explanation use cached version ROIs stored GeoJSON file previously generated available sample data ThermalRaster package. Now let’s compare distribution temperature values bark cavity oak tree:  Average std-deviation temperature values (deg.C) Now let’s use different image, time beech tree:  Average std-deviation temperature values (deg.C) Now, let’s make plot comparing distributions two micro-habitats - check potential multimodality differences medians:  plot time beech:","code":"# Image path in sample data querc_image_path <- system.file(\"extdata\", \"QUEROB1_EINBRGB_BWWG4662.JPG\", package = \"ThermalRaster\")  querc_rgb <- flir_rgb_to_rast(querc_image_path, exiftool_path, crop=TRUE)  querc_temp <- flir_raw_to_thermal(querc_image_path, exiftool_path) names(querc_temp) <- \"temp_c\"  par(mfrow=c(1, 2)) plotRGB(querc_rgb, main=\"RGB cropped\") plot_temp_rast(querc_temp, palette = \"magma\", main=\"Thermal - oak tree\") # Start a new plotting device without RStudio graphics device dev.new(noRStudioGD = TRUE)  # Plot the RGB image, in this case the cropped one which matches the thermal image plotRGB(querc_rgb)  # Draw polygons and attribute a type bole_s1 <- draw(\"polygon\", id = FALSE, xpd = FALSE, col = \"red\") bole_s1$type <- \"bark\"  bole_s2 <- draw(\"polygon\", id = FALSE, xpd = FALSE, col = \"blue\") bole_s2$type <- \"cavity\"  # Join the polygon ROIs tree_samps <- bole_s1 + bole_s2  #(Write data to later reuse) # writeVector(tree_samps, filename = \"./inst/extdata/QUEROB1_EINBRGB_BWWG4662_ROIs_bole.json\", #             overwrite = TRUE) geojson_file <- system.file(\"extdata\", \"QUEROB1_EINBRGB_BWWG4662_ROIs_bole.json\",                              package = \"ThermalRaster\")  tree_samps <- vect(geojson_file) crs(tree_samps) <- NA  par(mfrow=c(1,2))  plotRGB(querc_rgb) plot(tree_samps, col=c(\"red\",\"blue\"), legend=TRUE, alpha=0.3, add=TRUE) legend(\"topleft\", legend = tree_samps$type, pch = 20, xpd=NA, bg=\"white\",         col=c(\"red\",\"blue\"))  plot_temp_rast(querc_temp, palette = \"magma\", main=\"Thermal\") plot(tree_samps, add=TRUE) # Create a dataframe with the polygon sequential ID and its type tree_samps_df <- data.frame(ID = 1:length(tree_samps),                              type = tree_samps$type)  # Extract the values for each ROI and then  # Join the temp values with its type using  ext_values <- extract(querc_temp, tree_samps) %>%    left_join(tree_samps_df, by=\"ID\")   ext_values %>%    na.omit %>%    group_by(`type`) %>%    summarise(mean = median(temp_c), std=sd(temp_c)) %>%    knitr::kable(digits=2, col.names=c(\"Type\",\"Mean\",\"Std.-dev.\"),                caption=\"Average and std-deviation of temperature values (deg.C)\") beech_image_path <- system.file(\"extdata\", \"BEECH1_EOUTTREERGB_ILAC9031.JPG\", package = \"ThermalRaster\")   beech_rgb <- flir_rgb_to_rast(beech_image_path, exiftool_path, crop=TRUE)  beech_temp <- flir_raw_to_thermal(beech_image_path, exiftool_path) names(beech_temp) <- \"temp_c\"  beech_geojson_file <- system.file(\"extdata\", \"BEECH1_EOUTTREERGB_ILAC9031_ROIs_bole.json\",                              package = \"ThermalRaster\") beech_tree_samps <- vect(beech_geojson_file) crs(beech_tree_samps) <- NA  par(mfrow=c(1,2))  plotRGB(beech_rgb) plot(beech_tree_samps, col=c(\"red\",\"blue\"), legend=TRUE, alpha=0.3, add=TRUE) legend(\"topleft\", legend = beech_tree_samps$type, pch = 20, xpd=NA, bg=\"white\",         col=c(\"red\",\"blue\"))  plot_temp_rast(beech_temp, palette = \"magma\", main=\"Thermal\") plot(beech_tree_samps, add=TRUE) # Create a dataframe with the polygon sequential ID and its type tree_samps_df <- data.frame(ID = 1:length(beech_tree_samps),                              type = beech_tree_samps$type)  # Extract the values for each ROI and then  # Join the temp values with its type using  beech_ext_values <- extract(beech_temp, beech_tree_samps) %>%    left_join(tree_samps_df, by=\"ID\")  # Summarise values beech_ext_values %>%    na.omit %>%    group_by(`type`) %>%    summarise(mean = median(temp_c), std=sd(temp_c)) %>%    knitr::kable(digits=2, col.names=c(\"Type\",\"Mean\",\"Std.-dev.\"),                caption=\"Average and std-deviation of temperature values (deg.C)\") g1 <- ggplot(ext_values, aes(x=temp_c, fill=type)) +        geom_density(alpha=0.5) +        xlab(expression(\"Temperature \" ( degree*C))) +       ylab(\"Density\") +        theme_bw() +        labs(title = \"Oak\") +        theme(text=element_text(size=16))  plot(g1) g2 <- ggplot(beech_ext_values, aes(x=temp_c, fill=type)) +        geom_density(alpha=0.5) +        labs(title = \"Beech\") +        xlab(expression(\"Temperature \" ( degree*C))) +        ylab(\"Density\") +        theme_bw() +        theme(text=element_text(size=16))  plot(g2)"},{"path":"/index.html","id":"drawing-rois-with-the-roboflow","dir":"","previous_headings":"Working with regions-of-interest ROIs","what":"Drawing ROIs with the Roboflow","title":"Extract, process and visualize thermal and RGB images from FLIR\n    cameras","text":"Roboflow development platform simplifies process building deploying computer vision models. offers range tools designed assist developers preparing, creating, managing datasets needed training machine learning models, particular emphasis image recognition tasks. context use Roboflow’s features generate ROI’s micro-habitats showcase main functions. tutorial/vignette issue provided much details collect ROI’s using Roboflow. Examples Roboflow annotations tree micro-habitats. Notice detailed contours tool capable capturing. nutshell, two main ways making ROI’s Roboflow: “Smart Polygon” – semi-automatic tool based SAM (Facebook’s Segment Anything Model) can retrieve object boundaries easily, sometimes single click. Use one click add one point inside area want polygon mask. new points added within initial area, area removed. Conversely, point placed outside existing area, algorithm try expand object best way possible context, spectral textural similarity.  Another available option fully manual “Polygon Tool”, gives complete control user drawing polygon delineate mask.  ℹ️ Note: polygons “holes” “islands”. set tools annotation Roboflow app handle representations. Roboflow annotations recorded specific JSON format. ThermalRaster can use data stored JSON files convert sf objects compatible raster data terra package. Roboflow interface annotations/ROI’s JSON format bottom left corner. case oak tree canopy displayed sample. convert Roboflow annotations sf polygons actually usable ThermalRaster simple. example, ROIs collected Roboflow FLIR’s thumbnail image — size 1440 x 1080 pixels — however, want convert annotations dimensions thermal image (640 x 480) hence scale factor 2.25 (.e., f = 1440 / 640). first step (get_roboflow_masks) generate masks JSON file , second simplify_roboflow_masks, aggregate/simplify masks label/category. ℹ️ Note: Re-scaling annotations needed size RGB thermal images exactly (happens “cropped” images shown examples ). output list containing three elements: labs labels ROI polygons, pol_masks ROIs SpatVector polygon objects, rst_masks ROIs SpatRaster. applying simplyfying step get list similar structure input masks label aggregated together. label correspond single polygon mask single raster mask category, latter indicating presence (1 TRUE) absence (NA) label pixel.","code":"# Roboflow sample data robo_rois_path <- system.file(\"extdata\", \"EINBRGB_IPUQ4327.json\",                            package = \"ThermalRaster\")   # JSON data loaded from a Roboflow json file json <- jsonlite::fromJSON(robo_rois_path)  print(json$boxes[,1:6]) ##      type  label        x        y     width    height ## 1 polygon cavity 646.8750 831.7969  455.6250 1213.5938 ## 2 polygon   bole 532.9688 720.0000 1054.6875 1440.0000 robo_masks <- get_roboflow_masks(path = robo_rois_path,                                   rst_height = 640,                                   rst_width = 480,                                  geom_rescale = 2.25)   robo_masks_simple <- simplify_roboflow_masks(robo_masks)  print(robo_masks_simple) ## $labs ## [1] \"cavity\" \"bole\"   ##  ## $pol_masks ## $pol_masks[[1]] ##  class       : SpatVector  ##  geometry    : polygons  ##  dimensions  : 1, 1  (geometries, attributes) ##  extent      : 187, 389, 1, 540  (xmin, xmax, ymin, ymax) ##  coord. ref. :   ##  names       : layer ##  type        : <int> ##  values      :     1 ##  ## $pol_masks[[2]] ##  class       : SpatVector  ##  geometry    : polygons  ##  dimensions  : 1, 1  (geometries, attributes) ##  extent      : 3, 471, 0, 640  (xmin, xmax, ymin, ymax) ##  coord. ref. :   ##  names       : layer ##  type        : <int> ##  values      :     1 ##  ##  ## $rst_masks ## $rst_masks[[1]] ## class       : SpatRaster  ## dimensions  : 640, 480, 1  (nrow, ncol, nlyr) ## resolution  : 1, 1  (x, y) ## extent      : 0, 480, 0, 640  (xmin, xmax, ymin, ymax) ## coord. ref. :   ## source(s)   : memory ## name        : layer  ## min value   :     1  ## max value   :     1  ##  ## $rst_masks[[2]] ## class       : SpatRaster  ## dimensions  : 640, 480, 1  (nrow, ncol, nlyr) ## resolution  : 1, 1  (x, y) ## extent      : 0, 480, 0, 640  (xmin, xmax, ymin, ymax) ## coord. ref. :   ## source(s)   : memory ## name        : layer  ## min value   :     1  ## max value   :     1 plotRGB(rgb_lr) plot(robo_masks_simple$rst_masks[[1]], col=\"blue\", alpha=0.3,       add=TRUE, legend=FALSE)  legend(\"topright\", legend = \"cavity\", pch = 20, xpd=NA, bg=\"white\",         col=c(\"blue\"))"},{"path":"/README - BKP.html","id":null,"dir":"","previous_headings":"","what":"README","title":"README","text":"João Gonçalves 2024-04-02","code":""},{"path":[]},{"path":"/README - BKP.html","id":"table-of-contents","dir":"","previous_headings":"","what":"Table of Contents","title":"README","text":"Package description Working RGB imagery Working thermal data Generating synthetic predicted thermal images Drawing ROIs terra package Drawing ROIs Roboflow","code":""},{"path":"/README - BKP.html","id":"package-description","dir":"","previous_headings":"","what":"Package description","title":"README","text":"ThermalRaster package designed enhance processing analysis FLIR thermal RGB images. offers comprehensive suite functions extracting, processing, visualizing thermal data embedded within metadata FLIR images. Key features also include retrieving full cropped RGB images. Imagery returned SpatRaster objects compatible terra package, enabling profit package features/toolkit. Using overlap low-resolution thermal imagery high-resolution RGB images, package enables creation synthetic predicted thermal images either cropped full RGB images. achieved application Random Forest algorithm (via ranger package) Deep Learning methodologies (utilizing keras/tensorflow). package also enables handling JSON annotations/masks Roboflow (https://roboflow.com), enabling extraction ROIs images analysis, making possible assess, plot, analyze model fine-scale thermal variation micro-habitats (.e., TReMs - Tree Related Micro-habitats). Roboflow’s advantages include improved ROI digitization using manual SAM (Facebook’s Segment Anything) algorithm. ROIs can also generated terra package SpatVector objects. EXIFtool (https://exiftool.org/) broadly used retrieving metadata FLIR imagery ThermImage package convert raw temperature. show examples processing FLIR ONE Edge Pro imagery provided samples package:","code":""},{"path":"/README - BKP.html","id":"working-with-rgb-imagery","dir":"","previous_headings":"","what":"Working with RGB imagery","title":"README","text":"Plot FLIR image thumbnail captured FLIR camera:  Now let’s check full RGB image contained FLIR’s metadata:  now cropped RGB matches size resolution thermal image (.e., 640x480):  can see second image narrower closer tree trunk (focus target).","code":"library(ThermalRaster) library(terra) library(dplyr) library(ggplot2)  # Image path in sample data image_path <- system.file(\"extdata\", \"BEECH1_EINBRGB_IPUQ4327.JPG\", package = \"ThermalRaster\")  # Provide here the folder path where the EXIFtool executale is # NOTE: The executable must be named exiftool exiftool_path = \"C:/MyFiles/R-dev/Giant_Trees\" thumb <- flir_thumbnail_to_rast(image_path)  plotRGB(thumb) rgb_hr <- flir_rgb_to_rast(image_path, exiftool_path, crop = FALSE)  print(rgb_hr) ## class       : SpatRaster  ## dimensions  : 1440, 1080, 3  (nrow, ncol, nlyr) ## resolution  : 1, 1  (x, y) ## extent      : 0, 1080, 0, 1440  (xmin, xmax, ymin, ymax) ## coord. ref. :   ## source(s)   : memory ## names       : red, green, blue  ## min values  :   0,     0,    0  ## max values  : 255,   255,  255 plotRGB(rgb_hr, main = \"Full RGB (1440x1080\") rgb_lr <- flir_rgb_to_rast(image_path, exiftool_path, crop = TRUE)  plotRGB(rgb_lr, main = \"Cropped RGB (640x480)\")"},{"path":"/README - BKP.html","id":"working-with-thermal-data","dir":"","previous_headings":"","what":"Working with thermal data","title":"README","text":"Start extracting thermal data (degrees Celsius):  Now let’s remove outliers thermal image seem frequently occur lower portion temperature distribution values plot . convert values lower 3.5% percentile NA keep remaining values upper part distribution unchanged.  removing outliers temperature gradients tree surface micro-habitats cavities highlighted. Let’s test different color palette plot image:","code":"temp <- flir_raw_to_thermal(image_path, exiftool_path)  print(temp) ## class       : SpatRaster  ## dimensions  : 640, 480, 1  (nrow, ncol, nlyr) ## resolution  : 1, 1  (x, y) ## extent      : 0, 480, 0, 640  (xmin, xmax, ymin, ymax) ## coord. ref. :   ## source(s)   : memory ## name        :     lyr.1  ## min value   : -30.02469  ## max value   :  42.08388 summary(temp) ## Warning: [summary] used a sample  ##      lyr.1        ##  Min.   :-30.02   ##  1st Qu.: 12.16   ##  Median : 14.87   ##  Mean   : 15.00   ##  3rd Qu.: 18.33   ##  Max.   : 42.08 par(mfrow=c(1, 2)) plot_temp_rast(temp, palette = \"magma\", main = \"Thermal cropped\") plotRGB(rgb_lr, main = \"RGB cropped\") temp_out_rm <- remove_outliers(temp, pmin = 3.5, pmax = 100)  plot_temp_rast(temp_out_rm, palette = \"magma\") plot_temp_rast(temp_out_rm, palette=\"Spectral\")"},{"path":"/README - BKP.html","id":"generating-synthetic-or-predicted-thermal-images","dir":"","previous_headings":"","what":"Generating synthetic or predicted thermal images","title":"README","text":"ThermalRaster package currently provides methods generate synthetic predicted thermal data. enables gain detail fine-scale variation surface temperature inspecting/visualizing structures micro-habitats. achieve , use overlap “low-resolution” thermal imagery — .e., target response variable — “high-resolution” RGB cropped image — .e., predictors features, based color texture — train Random Forest Deep Learning model. generalization across images highly “challenging”, implement methods need train model every time. also means different levels performance success depending objects depicted images. training, model can applied onto images used training — .e., “low-resolution” cropped RGB images — also full RGB image extracted FLIR’s metadata. Keep mind synthetic/predicted thermal data full RGB limitations since train region may include features image. Let’s check RF model output: Now, let’s plot predicted image considering train/cropped RGB (outliers removed: < 3.5% percentile):  now, using full RGB generate “synthetic”/predicted thermal image (also w/ outliers removed):  Notice RF model can reasonably predict temperature pixels fully outside training sample/conditions!","code":"rf_sup_res <- rf_thermal_from_rgb(              rgb_rst = rgb_lr,      # The predictors from cropped/low-res RGB              temp_rst = temp,       # The target thermal image              rgb_high_res = rgb_hr, # The full RGB image              npix = 30000,          # Number of sample pixels used for training              rm_cor = FALSE,        # Remove predictors through correlation              rm_cor_thresh = 0.98,  # Correlation threshold; used if rm_cor = TRUE              get_rf_model = TRUE,   # Get the RF model in the output object              verbose = TRUE,        # Print progress messages?              scale_data = FALSE)    # Scale the data before model training? ## |-> Calculating features ... ## Done. ##  ## |-> Extracting sample data for training ... ## Done. ##  ## |-> Training Random Forest model ... ## Done. ##  ## |-> Super-resolving the thermal image ... ## |-> Calculating features for the high-resolution RGB image ... ## Done. ##  ## Predicting.. Progress: 75%. Estimated remaining time: 10 seconds. ## Done. ## [Run Time: 2 minutes 37 seconds ] print(rf_sup_res$rf_mod) ## Ranger result ##  ## Call: ##  ranger::ranger(temp ~ ., data = samp_rstdf)  ##  ## Type:                             Regression  ## Number of trees:                  500  ## Sample size:                      30000  ## Number of independent variables:  29  ## Mtry:                             5  ## Target node size:                 5  ## Variable importance mode:         none  ## Splitrule:                        variance  ## OOB prediction error (MSE):       22.89146  ## R squared (OOB):                  0.7085754 pred_term_train_outlrm <- remove_outliers(rf_sup_res$pred_temp_train, pmin = 3.5)  par(mfrow=c(1, 3))  plotRGB(rgb_lr, main=\"Cropped RGB image\")  plot_temp_rast(temp_out_rm, palette=\"magma\", main=\"Thermal train data\")  plot_temp_rast(pred_term_train_outlrm, palette = \"magma\", main=\"Synthetic/predicted thermal\") # Remove outliers pred_term_full_outlrm <- remove_outliers(rf_sup_res$pred_temp_rgb_hr, pmin = 7.5)  par(mfrow=c(1, 2))  plotRGB(rgb_hr, main=\"Full RGB image\")  plot_temp_rast(pred_term_full_outlrm, palette = \"magma\", main=\"Synthetic/predicted thermal\")"},{"path":"/README - BKP.html","id":"working-with-regions-of-interest-rois","dir":"","previous_headings":"","what":"Working with regions-of-interest ROIs","title":"README","text":"Basically two ways currently","code":""},{"path":"/README - BKP.html","id":"drawing-rois-with-the-terra-package","dir":"","previous_headings":"Working with regions-of-interest ROIs","what":"Drawing ROIs with the terra package","title":"README","text":"objective demo check distribution temperature values different micro-habitats tree bole (bark one cavity). draw ROI geometry . draw ROI use draw function terra package. function allows drawing plot get SpatVector (points, lines polygons) SpatExtent object later use. calling function, start clicking cropped RGB image (since one overlaps thermal, .e. number columns/rows) draw selected geometry. done, press ESC select “Stop”. can also preset maximum number clicks. Let’s start loading train image:  Start new plotting device (useful avoid issues draw using RStudio) draw ROI. vertices coordinates saved object. drawing interactive, purpose explanation use cached version ROIs stored GeoJSON file previously generated available sample data ThermalRaster package. Now let’s compare distribution temperature values bark cavity oak tree:  Average std-deviation temperature values (deg.C) Now let’s use different image, time beech tree:  Average std-deviation temperature values (deg.C) Now, let’s make plot comparing distributions two micro-habitats - check potential multimodality differences medians:  plot time beech:","code":"# Image path in sample data querc_image_path <- system.file(\"extdata\", \"QUEROB1_EINBRGB_BWWG4662.JPG\", package = \"ThermalRaster\")  querc_rgb <- flir_rgb_to_rast(querc_image_path, exiftool_path, crop=TRUE)  querc_temp <- flir_raw_to_thermal(querc_image_path, exiftool_path) names(querc_temp) <- \"temp_c\"  par(mfrow=c(1, 2)) plotRGB(querc_rgb, main=\"RGB cropped\") plot_temp_rast(querc_temp, palette = \"magma\", main=\"Thermal - oak tree\") # Start a new plotting device without RStudio graphics device dev.new(noRStudioGD = TRUE)  # Plot the RGB image, in this case the cropped one which matches the thermal image plotRGB(querc_rgb)  # Draw polygons and attribute a type bole_s1 <- draw(\"polygon\", id = FALSE, xpd = FALSE, col = \"red\") bole_s1$type <- \"bark\"  bole_s2 <- draw(\"polygon\", id = FALSE, xpd = FALSE, col = \"blue\") bole_s2$type <- \"cavity\"  # Join the polygon ROIs tree_samps <- bole_s1 + bole_s2  #(Write data to later reuse) # writeVector(tree_samps, filename = \"./inst/extdata/QUEROB1_EINBRGB_BWWG4662_ROIs_bole.json\", #             overwrite = TRUE) geojson_file <- system.file(\"extdata\", \"QUEROB1_EINBRGB_BWWG4662_ROIs_bole.json\",                              package = \"ThermalRaster\")  tree_samps <- vect(geojson_file) crs(tree_samps) <- NA  par(mfrow=c(1,2))  plotRGB(querc_rgb) plot(tree_samps, col=c(\"red\",\"blue\"), legend=TRUE, alpha=0.3, add=TRUE) legend(\"topleft\", legend = tree_samps$type, pch = 20, xpd=NA, bg=\"white\",         col=c(\"red\",\"blue\"))  plot_temp_rast(querc_temp, palette = \"magma\", main=\"Thermal\") plot(tree_samps, add=TRUE) # Create a dataframe with the polygon sequential ID and its type tree_samps_df <- data.frame(ID = 1:length(tree_samps),                              type = tree_samps$type)  # Extract the values for each ROI and then  # Join the temp values with its type using  ext_values <- extract(querc_temp, tree_samps) %>%    left_join(tree_samps_df, by=\"ID\")   ext_values %>%    na.omit %>%    group_by(`type`) %>%    summarise(mean = median(temp_c), std=sd(temp_c)) %>%    knitr::kable(digits=2, col.names=c(\"Type\",\"Mean\",\"Std.-dev.\"),                caption=\"Average and std-deviation of temperature values (deg.C)\") beech_image_path <- system.file(\"extdata\", \"BEECH1_EOUTTREERGB_ILAC9031.JPG\", package = \"ThermalRaster\")   beech_rgb <- flir_rgb_to_rast(beech_image_path, exiftool_path, crop=TRUE)  beech_temp <- flir_raw_to_thermal(beech_image_path, exiftool_path) names(beech_temp) <- \"temp_c\"  beech_geojson_file <- system.file(\"extdata\", \"BEECH1_EOUTTREERGB_ILAC9031_ROIs_bole.json\",                              package = \"ThermalRaster\") beech_tree_samps <- vect(beech_geojson_file) crs(beech_tree_samps) <- NA  par(mfrow=c(1,2))  plotRGB(beech_rgb) plot(beech_tree_samps, col=c(\"red\",\"blue\"), legend=TRUE, alpha=0.3, add=TRUE) legend(\"topleft\", legend = beech_tree_samps$type, pch = 20, xpd=NA, bg=\"white\",         col=c(\"red\",\"blue\"))  plot_temp_rast(beech_temp, palette = \"magma\", main=\"Thermal\") plot(beech_tree_samps, add=TRUE) # Create a dataframe with the polygon sequential ID and its type tree_samps_df <- data.frame(ID = 1:length(beech_tree_samps),                              type = beech_tree_samps$type)  # Extract the values for each ROI and then  # Join the temp values with its type using  beech_ext_values <- extract(beech_temp, beech_tree_samps) %>%    left_join(tree_samps_df, by=\"ID\")  # Summarise values beech_ext_values %>%    na.omit %>%    group_by(`type`) %>%    summarise(mean = median(temp_c), std=sd(temp_c)) %>%    knitr::kable(digits=2, col.names=c(\"Type\",\"Mean\",\"Std.-dev.\"),                caption=\"Average and std-deviation of temperature values (deg.C)\") g1 <- ggplot(ext_values, aes(x=temp_c, fill=type)) +        geom_density(alpha=0.5) +        xlab(expression(\"Temperature \" ( degree*C))) +       ylab(\"Density\") +        theme_bw() +        labs(title = \"Oak\") +        theme(text=element_text(size=16))  plot(g1) g2 <- ggplot(beech_ext_values, aes(x=temp_c, fill=type)) +        geom_density(alpha=0.5) +        labs(title = \"Beech\") +        xlab(expression(\"Temperature \" ( degree*C))) +        ylab(\"Density\") +        theme_bw() +        theme(text=element_text(size=16))  plot(g2)"},{"path":"/README - BKP.html","id":"drawing-rois-with-the-roboflow","dir":"","previous_headings":"Working with regions-of-interest ROIs","what":"Drawing ROIs with the Roboflow","title":"README","text":"Roboflow development platform simplifies process building deploying computer vision models. offers range tools designed assist developers preparing, creating, managing datasets needed training machine learning models, particular emphasis image recognition tasks. context use Roboflow’s features generate ROI’s micro-habitats showcase main functions. tutorial/vignette issue provided much details collect ROI’s using Roboflow. Examples Roboflow annotations tree micro-habitats. Notice detailed contours tool capable capturing. nutshell, two main ways making ROI’s Roboflow: “Smart Polygon” – semi-automatic tool based SAM (Facebook’s Segment Anything Model) can retrieve object boundaries easily, sometimes single click. Use one click add one point inside area want polygon mask. new points added within initial area, area removed. Conversely, point placed outside existing area, algorithm try expand object best way possible context, spectral textural similarity.  Another available option fully manual “Polygon Tool”, gives complete control user drawing polygon delineate mask.  ℹ️ Note: polygons “holes” “islands”. set tools annotation Roboflow app handle representations. Roboflow annotations recorded specific JSON format. ThermalRaster can use data stored JSON files convert sf objects compatible raster data terra package. Roboflow interface annotations/ROI’s JSON format bottom left corner. case oak tree canopy displayed sample. convert Roboflow annotations sf polygons actually usable ThermalRaster simple. example, ROIs collected Roboflow FLIR’s thumbnail image — size 1440 x 1080 pixels — however, want convert annotations dimensions thermal image (640 x 480) hence scale factor 2.25 (.e., f = 1440 / 640). first step (get_roboflow_masks) generate masks JSON file , second simplify_roboflow_masks, aggregate/simplify masks label/category. ℹ️ Note: Re-scaling annotations needed size RGB thermal images exactly (happens “cropped” images shown examples ). output list containing three elements: labs labels ROI polygons, pol_masks ROIs SpatVector polygon objects, rst_masks ROIs SpatRaster. applying simplyfying step get list similar structure input masks label aggregated together. label correspond single polygon mask single raster mask category, latter indicating presence (1 TRUE) absence (NA) label pixel.","code":"# Roboflow sample data robo_rois_path <- system.file(\"extdata\", \"EINBRGB_IPUQ4327.json\",                            package = \"ThermalRaster\")   # JSON data loaded from a Roboflow json file json <- jsonlite::fromJSON(robo_rois_path)  print(json$boxes[,1:6]) ##      type  label        x        y     width    height ## 1 polygon cavity 646.8750 831.7969  455.6250 1213.5938 ## 2 polygon   bole 532.9688 720.0000 1054.6875 1440.0000 robo_masks <- get_roboflow_masks(path = robo_rois_path,                                   rst_height = 640,                                   rst_width = 480,                                  geom_rescale = 2.25)   robo_masks_simple <- simplify_roboflow_masks(robo_masks)  print(robo_masks_simple) ## $labs ## [1] \"cavity\" \"bole\"   ##  ## $pol_masks ## $pol_masks[[1]] ##  class       : SpatVector  ##  geometry    : polygons  ##  dimensions  : 1, 1  (geometries, attributes) ##  extent      : 187, 389, 1, 540  (xmin, xmax, ymin, ymax) ##  coord. ref. :   ##  names       : layer ##  type        : <int> ##  values      :     1 ##  ## $pol_masks[[2]] ##  class       : SpatVector  ##  geometry    : polygons  ##  dimensions  : 1, 1  (geometries, attributes) ##  extent      : 3, 471, 0, 640  (xmin, xmax, ymin, ymax) ##  coord. ref. :   ##  names       : layer ##  type        : <int> ##  values      :     1 ##  ##  ## $rst_masks ## $rst_masks[[1]] ## class       : SpatRaster  ## dimensions  : 640, 480, 1  (nrow, ncol, nlyr) ## resolution  : 1, 1  (x, y) ## extent      : 0, 480, 0, 640  (xmin, xmax, ymin, ymax) ## coord. ref. :   ## source(s)   : memory ## name        : layer  ## min value   :     1  ## max value   :     1  ##  ## $rst_masks[[2]] ## class       : SpatRaster  ## dimensions  : 640, 480, 1  (nrow, ncol, nlyr) ## resolution  : 1, 1  (x, y) ## extent      : 0, 480, 0, 640  (xmin, xmax, ymin, ymax) ## coord. ref. :   ## source(s)   : memory ## name        : layer  ## min value   :     1  ## max value   :     1 plotRGB(rgb_lr) plot(robo_masks_simple$rst_masks[[1]], col=\"blue\", alpha=0.3,       add=TRUE, legend=FALSE)  legend(\"topright\", legend = \"cavity\", pch = 20, xpd=NA, bg=\"white\",         col=c(\"blue\"))"},{"path":"/reference/check_trailing_slash.html","id":null,"dir":"Reference","previous_headings":"","what":"Ensure trailing slash in directory path — check_trailing_slash","title":"Ensure trailing slash in directory path — check_trailing_slash","text":"Checks given file path ends slash (\"/\"). , appends one path. function useful preparing file paths operations require directory paths end slash, ensuring consistency preventing errors file path manipulations.","code":""},{"path":"/reference/check_trailing_slash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ensure trailing slash in directory path — check_trailing_slash","text":"","code":"check_trailing_slash(input_path)"},{"path":"/reference/check_trailing_slash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ensure trailing slash in directory path — check_trailing_slash","text":"input_path character string representing file directory path.","code":""},{"path":"/reference/check_trailing_slash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ensure trailing slash in directory path — check_trailing_slash","text":"input path trailing slash, already present.","code":""},{"path":"/reference/cimg_to_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a cimg image object (from imager) to SpatRaster — cimg_to_raster","title":"Convert a cimg image object (from imager) to SpatRaster — cimg_to_raster","text":"Converts image `cimg` class format `SpatRaster` object, optionally converting pixel values decimal format. function creates three separate raster layers red, green, blue channels image. useful processing analyzing images spatial context using `terra` package.","code":""},{"path":"/reference/cimg_to_raster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a cimg image object (from imager) to SpatRaster — cimg_to_raster","text":"","code":"cimg_to_raster(img, as_decimal = FALSE)"},{"path":"/reference/cimg_to_raster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a cimg image object (from imager) to SpatRaster — cimg_to_raster","text":"img `cimg` class object representing image converted. as_decimal logical flag indicating whether convert pixel values decimal format (TRUE) keep 8-bit integers (FALSE). Defaults FALSE.","code":""},{"path":"/reference/cimg_to_raster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a cimg image object (from imager) to SpatRaster — cimg_to_raster","text":"`SpatRaster` object three layers corresponding red,         green, blue channels original `cimg` image. Pixel values         either decimal format 8-bit integer format based         `as_decimal` parameter.","code":""},{"path":"/reference/compare_rasters.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare two SpatRaster objects — compare_rasters","title":"Compare two SpatRaster objects — compare_rasters","text":"Compares two SpatRaster objects determine dimensions, cell size, coordinate reference system (CRS). function performs series checks assess whether two rasters equivalent terms spatial properties, essential many spatial analysis tasks require alignment raster layers.","code":""},{"path":"/reference/compare_rasters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare two SpatRaster objects — compare_rasters","text":"","code":"compare_rasters(raster1, raster2)"},{"path":"/reference/compare_rasters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare two SpatRaster objects — compare_rasters","text":"raster1 first raster object compare. raster2 second raster object compare.","code":""},{"path":"/reference/compare_rasters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare two SpatRaster objects — compare_rasters","text":"Returns TRUE rasters number rows, number         columns, identical cell sizes, CRS. Otherwise, returns FALSE.","code":""},{"path":"/reference/convert_all_to_thermal.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert all FLIR radiometric images in folder to temperature SpatRasters — convert_all_to_thermal","title":"Convert all FLIR radiometric images in folder to temperature SpatRasters — convert_all_to_thermal","text":"Batch processes radiometric images specified input folder, converting temperature raster using metadata calibration. function designed work FLIR radiometric JPEG images, utilizing external EXIFtool metadata extraction specified function conversion process. output temperature rasters saved designated output folder.","code":""},{"path":"/reference/convert_all_to_thermal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert all FLIR radiometric images in folder to temperature SpatRasters — convert_all_to_thermal","text":"","code":"convert_all_to_thermal(   input_folder,   recursive = FALSE,   output_folder = NULL,   input_file_type = \"jpg\",   exiftool_path,   ... )"},{"path":"/reference/convert_all_to_thermal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert all FLIR radiometric images in folder to temperature SpatRasters — convert_all_to_thermal","text":"input_folder folder path containing input radiometric images. recursive Recursively list files `input_folder`. output_folder folder path output temperature raster files saved. Must different `input_folder`. input_file_type file extension input images (default \"jpg\"). parameter allows filtering files processed. exiftool_path Path EXIFtool executable, required metadata extraction FLIR images. ... parameters passed `flir_raw_to_thermal` function.","code":""},{"path":"/reference/convert_all_to_thermal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert all FLIR radiometric images in folder to temperature SpatRasters — convert_all_to_thermal","text":"function return value writes output temperature         raster files `output_folder`. Files placed `input_folder`         suffix _temp (Geo)TIFF format `output_folder` NULL. placed         defined `output_folder`.","code":""},{"path":"/reference/decimal_to_8bit.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a decimal value to an 8-Bit Number — decimal_to_8bit","title":"Convert a decimal value to an 8-Bit Number — decimal_to_8bit","text":"Takes decimal value (assumed 0 1) converts 8-bit number, ranging 0 255. input scaled 255 rounded produce 8-bit representation.","code":""},{"path":"/reference/decimal_to_8bit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a decimal value to an 8-Bit Number — decimal_to_8bit","text":"","code":"decimal_to_8bit(decimalValue)"},{"path":"/reference/decimal_to_8bit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a decimal value to an 8-Bit Number — decimal_to_8bit","text":"decimalValue numeric value 0 1 representing decimal value converted. Handling values outside range specified.","code":""},{"path":"/reference/decimal_to_8bit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a decimal value to an 8-Bit Number — decimal_to_8bit","text":"integer 0 255 representing 8-bit         version input decimal value.","code":""},{"path":"/reference/dl_thermal_from_rgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict thermal data from RGB images using Deep Learning — dl_thermal_from_rgb","title":"Predict thermal data from RGB images using Deep Learning — dl_thermal_from_rgb","text":"Enhances resolution predicts thermal data based high-resolution RGB images existing low-resolution thermal raster using deep learning model. model trained features derived RGB low-resolution thermal data, optionally scaled high correlation features removed. function can predict thermal data aligned provided high-resolution RGB image, effectively super-resolving thermal image generating new thermal data none exists.","code":""},{"path":"/reference/dl_thermal_from_rgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict thermal data from RGB images using Deep Learning — dl_thermal_from_rgb","text":"","code":"dl_thermal_from_rgb(   rgb_rst,   temp_rst,   rgb_high_res = NULL,   npix = 10000,   rm_cor = FALSE,   rm_cor_thresh = 0.98,   get_dl_model = TRUE,   verbose = TRUE,   scale_data = TRUE,   n_epochs = 80,   validation_split = 0.2,   learning_rate = 0.01 )"},{"path":"/reference/dl_thermal_from_rgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict thermal data from RGB images using Deep Learning — dl_thermal_from_rgb","text":"rgb_rst RGB `SpatRaster` object containing RGB data aligned `temp_rst`. temp_rst `SpatRaster` object containing corresponding lower-resolution thermal data. rgb_high_res (Optional) `SpatRaster` object containing high-resolution RGB data thermal predictions made. npix number pixels sample model training. rm_cor Logical flag indicating whether remove highly correlated features model training. rm_cor_thresh Correlation threshold removing correlated features. get_dl_model Logical flag indicating whether return deep learning model along predicted temperature raster(s). verbose Logical flag printing progress messages. scale_data Logical flag indicating whether scale feature data model training. n_epochs Number epochs model training. validation_split Fraction data used validation data. learning_rate Learning rate optimizer.","code":""},{"path":"/reference/dl_thermal_from_rgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict thermal data from RGB images using Deep Learning — dl_thermal_from_rgb","text":"Depending `get_dl_model`, either list containing predicted         temperature raster(s) deep learning model, just predicted         temperature raster(s). `rgb_high_res` provided, list include         predictions training resolution high-resolution RGB.         List components include: `pred_temp_train` thermal image predicted         training data (usually lower resolution); `pred_temp_rgb_hr`         predicted thermal data high-resolution RGB; `dl_mod`         Deep Learning model trained image.","code":""},{"path":"/reference/dl_thermal_from_rgb.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict thermal data from RGB images using Deep Learning — dl_thermal_from_rgb","text":"deep learning model used predicting thermal data high-resolution RGB images built using Keras library R. model structured sequential model, comprising several densely connected neural network layers ReLU activations, dropout layers regularization, final dense layer single unit regression output. model aims learn complex relationships spatial features derived RGB images corresponding thermal data, allowing predict temperature values new, high-resolution RGB images. Model Structure Input Layer: input layer designed accept flattened feature vectors derived color/spatial/texture features RGB thermal data. model includes multiple dense (fully connected) layers ReLU (Rectified Linear Unit) activation functions. layers responsible capturing nonlinear relationships data. Dropout layers inserted dense layers reduce risk overfitting randomly setting fraction input units 0 update training time. helps improve model generalization. Activity regularization layers applied introduce penalty layer's activation, aiding preventing overfitting promoting simpler models. Output Layer: final layer dense layer single unit, suitable regression tasks. layer outputs predicted temperature value input feature vector. Training Configuration Loss Function: Mean Squared Error (MSE), suitable regression problems, measuring average squares errors true predicted values. Optimizer: Adam, specified learning rate, algorithm first-order gradient-based optimization stochastic objective functions. Metrics: Mean Absolute Error (MAE), providing average absolute differences predicted actual values, offering interpretation prediction accuracy. Epochs Validation Split: model trained predefined number epochs, portion data reserved validation monitor prevent overfitting.","code":""},{"path":"/reference/flir_get_full_rgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract a full uncropped RGB image from FLIR Radiometric JPEG — flir_get_full_rgb","title":"Extract a full uncropped RGB image from FLIR Radiometric JPEG — flir_get_full_rgb","text":"Extracts full RGB image embedded within FLIR radiometric JPEG file, saving specified output path. function uses EXIFtool extract embedded RGB image. Additionally, option load extracted image directly R either `imager` package `cimg` object `terra` package `SpatRaster` object, depending `load_as` parameter.","code":""},{"path":"/reference/flir_get_full_rgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract a full uncropped RGB image from FLIR Radiometric JPEG — flir_get_full_rgb","text":"","code":"flir_get_full_rgb(   img_path,   out_path,   replace = FALSE,   exiftool_path,   load_as = NULL )"},{"path":"/reference/flir_get_full_rgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract a full uncropped RGB image from FLIR Radiometric JPEG — flir_get_full_rgb","text":"img_path Path input FLIR radiometric JPEG file. out_path Path extracted full RGB image saved. replace Logical flag indicating whether existing output file replaced. Defaults FALSE. exiftool_path Path EXIFtool executable. load_as (Optional) Specifies load extracted image R: \"cimg\" `imager` package object, \"SpatRaster\" `terra` package object, NULL save file without loading. Defaults NULL.","code":""},{"path":"/reference/flir_get_full_rgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract a full uncropped RGB image from FLIR Radiometric JPEG — flir_get_full_rgb","text":"Returns TRUE extraction optional loading successful, FALSE         otherwise. `load_as` specified, returns loaded image object.","code":""},{"path":"/reference/flir_raw_to_thermal.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert FLIR raw thermal image to a temperature SpatRaster object — flir_raw_to_thermal","title":"Convert FLIR raw thermal image to a temperature SpatRaster object — flir_raw_to_thermal","text":"Converts raw thermal imagery FLIR cameras temperature raster using metadata extracted EXIFtool. function reads FLIR JPEG image, extracts necessary calibration parameters metadata, computes temperature values pixel. temperature data can scaled factor written file `SpatRaster` object. useful thermal image analysis, allowing quantitative assessment temperature distributions captured scene.","code":""},{"path":"/reference/flir_raw_to_thermal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert FLIR raw thermal image to a temperature SpatRaster object — flir_raw_to_thermal","text":"","code":"flir_raw_to_thermal(   img_path,   exiftool_path,   out_path = NULL,   scale_factor = NULL,   datatype = \"FLT4S\",   overwrite = TRUE )"},{"path":"/reference/flir_raw_to_thermal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert FLIR raw thermal image to a temperature SpatRaster object — flir_raw_to_thermal","text":"img_path Path input FLIR image file. exiftool_path Path EXIFtool executable, used extracting metadata FLIR image. out_path (Optional) Output file path (usually .tif extension) temperature raster file saved. scale_factor (Optional) numeric value scale temperature values. Useful converting temperature specific range format conversion integer numbers saving space. NULL, scaling applied. datatype Data type saving raster file. Supported types include \"INT1S\", \"INT2S\", \"INT4S\", \"INT1U\", \"INT2U\", \"INT4U\", \"FLT4S\", \"FLT8S\". Defaults \"FLT4S\". overwrite Logical flag indicating whether overwrite output raster file. Defaults TRUE.","code":""},{"path":"/reference/flir_raw_to_thermal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert FLIR raw thermal image to a temperature SpatRaster object — flir_raw_to_thermal","text":"`SpatRaster` object representing temperature distribution         input FLIR image. `out_path` TRUE, raster also saved         specified output folder usually (Geo)TIFF file.","code":""},{"path":"/reference/flir_rgb_to_rast.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts a FLIR image into an RGB SpatRaster — flir_rgb_to_rast","title":"Converts a FLIR image into an RGB SpatRaster — flir_rgb_to_rast","text":"Extracts full RGB image FLIR radiometric JPEG, optionally crops based FLIR metadata match thermal image's dimensions, converts `SpatRaster` object. function can save extracted cropped RGB image TIFF file. Cropping useful align RGB image corresponding thermal image, enabling direct comparison fusion data sources.","code":""},{"path":"/reference/flir_rgb_to_rast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts a FLIR image into an RGB SpatRaster — flir_rgb_to_rast","text":"","code":"flir_rgb_to_rast(   img_path,   exiftool_path,   out_path = NULL,   crop = TRUE,   out_path_crop = NULL,   overwrite = TRUE )"},{"path":"/reference/flir_rgb_to_rast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts a FLIR image into an RGB SpatRaster — flir_rgb_to_rast","text":"img_path Path input FLIR radiometric JPEG file. exiftool_path Path EXIFtool executable, including trailing slash. out_path Optional. location/path save full RGB image. `NULL` directory input used file name suffix _full_RGB.jpg. image created EXIFtool extracting RGB image metadata. file path specified must jpg extension. crop Logical flag indicating whether crop extracted RGB image match dimensions thermal image. Defaults TRUE. out_path_crop Path cropped imaged saved. use `terra::writeRaster` write image data. overwrite Overwrite image data `terra::writeRaster`? Default: TRUE","code":""},{"path":"/reference/flir_rgb_to_rast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts a FLIR image into an RGB SpatRaster — flir_rgb_to_rast","text":"`SpatRaster` object representing extracted image. `crop=TRUE` cropped         RGB image returned instead full RGB image.","code":""},{"path":"/reference/flir_thumbnail_to_rast.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert FLIR camera thumbnail image to SpatRaster — flir_thumbnail_to_rast","title":"Convert FLIR camera thumbnail image to SpatRaster — flir_thumbnail_to_rast","text":"Converts thumbnail image extracted FLIR camera's radiometric JPEG SpatRster object.","code":""},{"path":"/reference/flir_thumbnail_to_rast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert FLIR camera thumbnail image to SpatRaster — flir_thumbnail_to_rast","text":"","code":"flir_thumbnail_to_rast(img_path, as_decimal = FALSE)"},{"path":"/reference/flir_thumbnail_to_rast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert FLIR camera thumbnail image to SpatRaster — flir_thumbnail_to_rast","text":"img_path Path FLIR image. as_decimal logical flag indicating whether convert pixel values decimal format. Defaults FALSE.","code":""},{"path":"/reference/flir_thumbnail_to_rast.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert FLIR camera thumbnail image to SpatRaster — flir_thumbnail_to_rast","text":"`SpatRaster` object representing FLIR thumbnail image.","code":""},{"path":"/reference/get_roboflow_masks.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Roboflow ROI masks/annotations as polygons and raster objects — get_roboflow_masks","title":"Get Roboflow ROI masks/annotations as polygons and raster objects — get_roboflow_masks","text":"Extracts polygon masks JSON file, formatted Roboflow, converts `SpatVector` polygon objects. Additionally, creates raster ROI masks (`SpatRaster` objects) polygons based specified image dimensions. function useful processing polygon annotations machine learning datasets, particularly tasks involving spatial analysis computer vision. supports rescaling geometric data match different image resolutions.","code":""},{"path":"/reference/get_roboflow_masks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Roboflow ROI masks/annotations as polygons and raster objects — get_roboflow_masks","text":"","code":"get_roboflow_masks(   path,   rst_height = 1440,   rst_width = 1080,   geom_rescale = NULL )"},{"path":"/reference/get_roboflow_masks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Roboflow ROI masks/annotations as polygons and raster objects — get_roboflow_masks","text":"path file path JSON file containing polygon data. rst_height original height (number rows) image used annotation Roboflow. height set output raster mask. Defaults 1440. rst_width width (number columns) input image output mask. Defaults 1080. geom_rescale numeric value `NULL`. specified, used rescale polygon vertices match different image resolution. useful annotation coordinates JSON file based different resolution target raster. NULL, rescaling applied.","code":""},{"path":"/reference/get_roboflow_masks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Roboflow ROI masks/annotations as polygons and raster objects — get_roboflow_masks","text":"list containing three elements: `labs` labels polygons,         `pol_masks` `SpatVector` polygon objects, `rst_masks`         corresponding rasters `SpatRaster` masks/ROIs.","code":""},{"path":"/reference/get_sample_dir_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the name of the last directory in a path — get_sample_dir_name","title":"Extract the name of the last directory in a path — get_sample_dir_name","text":"Given file path, function extracts name last directory path. path split based \"/\" separator, last component returned, expected directory name.","code":""},{"path":"/reference/get_sample_dir_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the name of the last directory in a path — get_sample_dir_name","text":"","code":"get_sample_dir_name(x)"},{"path":"/reference/get_sample_dir_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the name of the last directory in a path — get_sample_dir_name","text":"x character string representing file path.","code":""},{"path":"/reference/get_sample_dir_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the name of the last directory in a path — get_sample_dir_name","text":"character string containing name last directory         given path.","code":""},{"path":"/reference/laplacian_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a Laplacian filter for edge detection on a RGB SpatRaster object — laplacian_filter","title":"Apply a Laplacian filter for edge detection on a RGB SpatRaster object — laplacian_filter","text":"Applies Laplacian filter RGB SpatRaster edge detection, supporting simple diagonal kernel. function first converts RGB raster grayscale image averaging RGB values scaling [0, 1] range. Depending `type` parameter, Laplacian kernel without diagonal elements (option: 'simple') diagonal elements ('diagonal') applied. highlights edges within image enhancing regions rapid intensity change.","code":""},{"path":"/reference/laplacian_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a Laplacian filter for edge detection on a RGB SpatRaster object — laplacian_filter","text":"","code":"laplacian_filter(rgb_rast, type = \"simple\")"},{"path":"/reference/laplacian_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a Laplacian filter for edge detection on a RGB SpatRaster object — laplacian_filter","text":"rgb_rast RGB SpatRaster object Laplacian filter applied. raster expected three layers corresponding RGB channels. converted grayscale image applying Laplacian filter. type character string specifying type Laplacian kernel use. \"simple\" uses kernel focuses vertical horizontal neighbors, \"diagonal\" includes diagonal neighbors well. Defaults \"simple\". value result error.","code":""},{"path":"/reference/laplacian_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a Laplacian filter for edge detection on a RGB SpatRaster object — laplacian_filter","text":"SpatRaster object representing filtered image, highlighting edges         detected original RGB raster. image emphasizes areas rapid         intensity change, corresponding edges.","code":""},{"path":"/reference/plot_temp_rast.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a temperature SpatRaster using a specified color palette — plot_temp_rast","title":"Plot a temperature SpatRaster using a specified color palette — plot_temp_rast","text":"Plots raster object using specified color palette. function allows visualization raster data various color schemes enhance representation spatial patterns. raster values scaled `scale_temp` plotting, range palettes based viridis RColorBrewer packages available. function useful visualizing temperature data continuous variable represented raster format.","code":""},{"path":"/reference/plot_temp_rast.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a temperature SpatRaster using a specified color palette — plot_temp_rast","text":"","code":"plot_temp_rast(rst, palette = \"magma\", scale_temp = NULL, ...)"},{"path":"/reference/plot_temp_rast.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a temperature SpatRaster using a specified color palette — plot_temp_rast","text":"rst raster object plotted. palette character string specifying color palette use. Options include \"magma\", \"plasma\", \"inferno\" (viridis package), \"RdYlBu\", \"Spectral\", \"PuOr\" (RColorBrewer package), \"heat\" heat.colors. Defaults \"magma\". scale_temp numeric value scale raster values plotting. Defaults 100. ... Additional arguments passed plot function.","code":""},{"path":"/reference/prepare_train_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare training features from an RGB image — prepare_train_data","title":"Prepare training features from an RGB image — prepare_train_data","text":"Processes RGB (predictors) temperature (target) raster data generate feature dataset suitablefor training machine learning models. function computes several spatial statistics (mean standard deviation) within multiple window sizes (3x3, 5x5, 7x7, 9x9) RGB channel. Additionally, applies Sobel Laplacian filters edge detection. function ensures RGB temperature rasters compatible terms spatial dimensions resolution proceeding.","code":""},{"path":"/reference/prepare_train_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare training features from an RGB image — prepare_train_data","text":"","code":"prepare_train_data(rgb_rst, temp_rst = NULL)"},{"path":"/reference/prepare_train_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare training features from an RGB image — prepare_train_data","text":"rgb_rst `SpatRaster` object containing RGB SpatRaster data. temp_rst `SpatRaster` object containing temperature SpatRaster data. Default NULL case prediction performed. training needs defined.","code":""},{"path":"/reference/prepare_train_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare training features from an RGB image — prepare_train_data","text":"data frame row represents pixel columns represent         temperature (temp NULL), original RGB values, spatial statistics         RGB channel,results Sobel Laplacian edge detection.         data frame suitable use machine learning model training/prediction.","code":""},{"path":"/reference/pretty_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"Format duration (difftime) into a readable string — pretty_duration","title":"Format duration (difftime) into a readable string — pretty_duration","text":"Converts duration object human-readable string format, showing duration minutes seconds. function takes `difftime` object, converts seconds, formats \"X minutes Y seconds\". can particularly useful displaying time durations user-friendly manner.","code":""},{"path":"/reference/pretty_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format duration (difftime) into a readable string — pretty_duration","text":"","code":"pretty_duration(duration)"},{"path":"/reference/pretty_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format duration (difftime) into a readable string — pretty_duration","text":"duration `difftime` object representing duration formatted. duration positive value.","code":""},{"path":"/reference/pretty_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format duration (difftime) into a readable string — pretty_duration","text":"character string describing duration terms minutes         seconds, formatted \"X minutes Y seconds\".","code":""},{"path":"/reference/rast_upsample.html","id":null,"dir":"Reference","previous_headings":"","what":"Upsample a SpatRaster to specified width and height dimensions — rast_upsample","title":"Upsample a SpatRaster to specified width and height dimensions — rast_upsample","text":"Upsamples `SpatRaster` object specified dimensions using chosen interpolation method. function designed increase spatial resolution image interpolating new pixel values manner consistent specified resampling method. useful contexts image resolution needs increased analysis visualization purposes.","code":""},{"path":"/reference/rast_upsample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upsample a SpatRaster to specified width and height dimensions — rast_upsample","text":"","code":"rast_upsample(rst, to_height = 1440, to_width = 1080, method = \"near\")"},{"path":"/reference/rast_upsample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upsample a SpatRaster to specified width and height dimensions — rast_upsample","text":"rst `SpatRaster` object representing image upsampled. to_height target height (number rows) upsampled image. Defaults 1440. to_width target width (number columns) upsampled image. Defaults 1080. method method interpolation use resampling. Supported methods include \"near\" nearest neighbor interpolation, among others. Defaults \"near\".","code":""},{"path":"/reference/rast_upsample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upsample a SpatRaster to specified width and height dimensions — rast_upsample","text":"`SpatRaster` object representing upsampled image specified         target dimensions.","code":""},{"path":"/reference/remove_outliers.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove outliers from a SpatRaster based on percentile thresholds — remove_outliers","title":"Remove outliers from a SpatRaster based on percentile thresholds — remove_outliers","text":"function removes outliers raster object setting values outside specified percentile thresholds NA. uses quantile function determine lower upper bounds based `pmin` `pmax` parameters, respectively. Values lower percentile (`pmin`) upper percentile (`pmax`) considered outliers set NA. can useful data preprocessing visualization, especially spatial analysis modeling, mitigate impact extreme values.","code":""},{"path":"/reference/remove_outliers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove outliers from a SpatRaster based on percentile thresholds — remove_outliers","text":"","code":"remove_outliers(rast, pmin = 5, pmax = 100, na.rm = TRUE)"},{"path":"/reference/remove_outliers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove outliers from a SpatRaster based on percentile thresholds — remove_outliers","text":"rast SpatRaster object outliers removed. pmin lower percentile used define lower threshold outliers. Values percentile set NA. Defaults 5. pmax upper percentile used define upper threshold outliers. Values percentile set NA. Defaults 95. na.rm Remove NA's (default TRUE)","code":""},{"path":"/reference/remove_outliers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove outliers from a SpatRaster based on percentile thresholds — remove_outliers","text":"SpatRaster object similar input values outside         specified percentile thresholds set NA.","code":""},{"path":"/reference/rf_thermal_from_rgb.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict thermal data from RGB image using Random Forest — rf_thermal_from_rgb","title":"Predict thermal data from RGB image using Random Forest — rf_thermal_from_rgb","text":"Enhances resolution predicts thermal data based high-resolution RGB images existing low-resolution thermal raster using Random Forest model. model trained features derived RGB low-resolution thermal data, optionally scaled high correlation features removed. function can predict thermal data aligned provided high-resolution RGB image, effectively super-resolving thermal image generating new thermal data none exists.","code":""},{"path":"/reference/rf_thermal_from_rgb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict thermal data from RGB image using Random Forest — rf_thermal_from_rgb","text":"","code":"rf_thermal_from_rgb(   rgb_rst,   temp_rst,   rgb_high_res = NULL,   npix = 10000,   rm_cor = FALSE,   rm_cor_thresh = 0.98,   get_rf_model = TRUE,   verbose = TRUE,   scale_data = FALSE,   ... )"},{"path":"/reference/rf_thermal_from_rgb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict thermal data from RGB image using Random Forest — rf_thermal_from_rgb","text":"rgb_rst RGB `SpatRaster` object containing RGB data aligned `temp_rst`. temp_rst `SpatRaster` object containing corresponding lower-resolution thermal data. rgb_high_res (Optional) `SpatRaster` object containing high-resolution RGB data thermal predictions made. npix number pixels sample model training. rm_cor Logical flag indicating whether remove highly correlated features model training. rm_cor_thresh Correlation threshold removing correlated features. get_rf_model Logical flag indicating whether return Random Forest model along predicted temperature raster(s). verbose Logical flag printing progress messages. scale_data Logical flag indicating whether scale feature data model training. ... Additional arguments passed Random Forest model training function.","code":""},{"path":"/reference/rf_thermal_from_rgb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict thermal data from RGB image using Random Forest — rf_thermal_from_rgb","text":"Depending `get_rf_model`, either list containing predicted         temperature raster(s) Random Forest model, just predicted         temperature raster(s). `rgb_high_res` provided, list include         predictions training resolution high-resolution RGB.         List components include: `pred_temp_train` thermal image predicted         training data (usually lower resolution); `pred_temp_rgb_hr`         predicted thermal data high-resolution RGB; `rf_mod`         Random Forest model trained image.","code":""},{"path":"/reference/simplify_roboflow_masks.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify and aggregate ROI masks by label from Roboflow annotations — simplify_roboflow_masks","title":"Simplify and aggregate ROI masks by label from Roboflow annotations — simplify_roboflow_masks","text":"Aggregates polygon raster masks labels list masks, produced `get_roboflow_masks` function converting JSON polygon annotations spatial formats. functioncombines polygons raster masks label single, aggregated masks, particularly useful analyses require handling label single entity layer. aggregation raster masks involves creating unified mask pixel covered least one mask given label marked part label.","code":""},{"path":"/reference/simplify_roboflow_masks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify and aggregate ROI masks by label from Roboflow annotations — simplify_roboflow_masks","text":"","code":"simplify_roboflow_masks(masks)"},{"path":"/reference/simplify_roboflow_masks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify and aggregate ROI masks by label from Roboflow annotations — simplify_roboflow_masks","text":"masks list generated `get_roboflow_masks` containing labels/categories (`labs`), polygon masks (`pol_masks` `SpatVector` objects), raster masks (`rst_masks` `SpatRaster`) extracted JSON annotations.","code":""},{"path":"/reference/simplify_roboflow_masks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify and aggregate ROI masks by label from Roboflow annotations — simplify_roboflow_masks","text":"list similar structure input masks label         aggregated together. label correspond single polygon mask         single raster mask, latter indicating presence (1 TRUE) absence         (`NA`) label pixel.","code":""},{"path":"/reference/sobel_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply Sobel filter for edge detection on RGB SpatRaster object — sobel_filter","title":"Apply Sobel filter for edge detection on RGB SpatRaster object — sobel_filter","text":"function applies Sobel filter RGB SpatRaster edge detection. first converts RGB raster grayscale image averaging RGB values scaling [0, 1] range. , applies Sobel operators (Gx Gy) horizontal vertical edge detection, respectively. magnitude gradient computed, representing edge strength pixel.","code":""},{"path":"/reference/sobel_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply Sobel filter for edge detection on RGB SpatRaster object — sobel_filter","text":"","code":"sobel_filter(rgb_rast)"},{"path":"/reference/sobel_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply Sobel filter for edge detection on RGB SpatRaster object — sobel_filter","text":"rgb_rast RGB SpatRaster object Sobel filter applied. raster expected three layers corresponding RGB channels.","code":""},{"path":"/reference/sobel_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply Sobel filter for edge detection on RGB SpatRaster object — sobel_filter","text":"SpatRaster object representing magnitude edges detected         original RGB raster. raster values ranging 0 maximum         gradient magnitude, indicating strength edges pixel.","code":""}]
